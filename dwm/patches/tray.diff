diff -up a/dwm.c b/dwm.c
--- a/dwm.c	2014-05-02 11:49:15.286308394 +0200
+++ b/dwm.c	2014-05-02 11:55:06.351797946 +0200
@@ -267,6 +267,7 @@ static void (*handler[LASTEvent]) (XEven
 };
 static Atom wmatom[WMLast], netatom[NetLast];
 static Bool running = True;
+static Client *panel = NULL;
 static Cur *cursor[CurLast];
 static ClrScheme scheme[SchemeLast];
 static Display *dpy;
@@ -316,7 +317,7 @@ applyrules(Client *c) {
 		XFree(ch.res_class);
 	if(ch.res_name)
 		XFree(ch.res_name);
-	c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
+	if(!c->tags && panel != c) c->tags = c->tags & TAGMASK ? c->tags & TAGMASK : c->mon->tagset[c->mon->seltags];
 }
 
 Bool
@@ -711,16 +712,18 @@ drawbar(Monitor *m) {
 	Client *c;
 
 	for(c = m->clients; c; c = c->next) {
-		occ |= c->tags;
-		if(c->isurgent)
-			urg |= c->tags;
+		if(panel != c) {
+			occ |= c->tags;
+			if(c->isurgent)
+				urg |= c->tags;
+		}
 	}
 	x = 0;
 	for(i = 0; i < LENGTH(tags); i++) {
 		w = TEXTW(tags[i]);
 		drw_setscheme(drw, m->tagset[m->seltags] & 1 << i ? &scheme[SchemeSel] : &scheme[SchemeNorm]);
 		drw_text(drw, x, 0, w, bh, tags[i], urg & 1 << i);
-		drw_rect(drw, x, 0, w, bh, m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+		drw_rect(drw, x, 0, w, bh, m == selmon && (selmon->sel && selmon->sel != panel ) && selmon->sel->tags & 1 << i,
 		           occ & 1 << i, urg & 1 << i);
 		x += w;
 	}
@@ -796,8 +799,9 @@ expose(XEvent *e) {
 
 void
 focus(Client *c) {
+	if (panel == c) return;
 	if(!c || !ISVISIBLE(c))
-		for(c = selmon->stack; c && !ISVISIBLE(c); c = c->snext);
+		for(c = selmon->stack; c && (!ISVISIBLE(c) || panel == c); c = c->snext);
 	/* was if(selmon->sel) */
 	if(selmon->sel && selmon->sel != c)
 		unfocus(selmon->sel, False);
@@ -849,17 +853,17 @@ focusstack(const Arg *arg) {
 	if(!selmon->sel)
 		return;
 	if(arg->i > 0) {
-		for(c = selmon->sel->next; c && !ISVISIBLE(c); c = c->next);
+		for(c = selmon->sel->next; c && (!ISVISIBLE(c) || panel == c); c = c->next);
 		if(!c)
-			for(c = selmon->clients; c && !ISVISIBLE(c); c = c->next);
+			for(c = selmon->clients; c && (!ISVISIBLE(c) || panel == c); c = c->next);
 	}
 	else {
 		for(i = selmon->clients; i != selmon->sel; i = i->next)
-			if(ISVISIBLE(i))
+			if(ISVISIBLE(i) && panel != i)
 				c = i;
 		if(!c)
 			for(; i; i = i->next)
-				if(ISVISIBLE(i))
+				if(ISVISIBLE(i) && panel != i)
 					c = i;
 	}
 	if(c) {
@@ -941,7 +945,7 @@ grabbuttons(Client *c, Bool focused) {
 		unsigned int i, j;
 		unsigned int modifiers[] = { 0, LockMask, numlockmask, numlockmask|LockMask };
 		XUngrabButton(dpy, AnyButton, AnyModifier, c->win);
-		if(focused) {
+		if(focused || panel == c) {
 			for(i = 0; i < LENGTH(buttons); i++)
 				if(buttons[i].click == ClkClientWin)
 					for(j = 0; j < LENGTH(modifiers); j++)
@@ -1055,6 +1059,12 @@ manage(Window w, XWindowAttributes *wa)
 	           && (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
 	c->bw = borderpx;
 
+	updatetitle(c);
+	if(strstr(c->name, "stalonetray") || strstr(c->name, "panel")) {
+		panel = c;
+		c->bw = 0;
+}
+
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
 	XSetWindowBorder(dpy, w, scheme[SchemeNorm].border->rgb);
@@ -1145,6 +1155,7 @@ movemouse(const Arg *arg) {
 		return;
 	if(c->isfullscreen) /* no support moving fullscreen windows by mouse */
 		return;
+	if (panel == c) return;
 	restack(selmon);
 	ocx = c->x;
 	ocy = c->y;
@@ -1297,6 +1308,7 @@ resizemouse(const Arg *arg) {
 		return;
 	if(c->isfullscreen) /* no support resizing fullscreen windows by mouse */
 		return;
+	if (panel == c) return;
 	restack(selmon);
 	ocx = c->x;
 	ocy = c->y;
@@ -1573,7 +1585,7 @@ void
 showhide(Client *c) {
 	if(!c)
 		return;
-	if(ISVISIBLE(c)) { /* show clients top down */
+	if(ISVISIBLE(c) || panel == c) { /* show clients top down */
 		XMoveWindow(dpy, c->win, c->x, c->y);
 		if((!c->mon->lt[c->mon->sellt]->arrange || c->isfloating) && !c->isfullscreen)
 			resize(c, c->x, c->y, c->w, c->h, False);
@@ -1721,6 +1733,8 @@ void
 unmanage(Client *c, Bool destroyed) {
 	Monitor *m = c->mon;
 	XWindowChanges wc;
+	
+	if(panel == c) panel = NULL;
 
 	/* The server grab construct avoids race conditions. */
 	detach(c);
