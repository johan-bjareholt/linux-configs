
# Set up the prompt
autoload -Uz promptinit
promptinit





## Min del av scriptet!

## Path variables
# Android paths
export ANDROID_HOME=/opt/android-sdk/
export PATH=$PATH:/opt/android-sdk/platform-tools
export PATH=$PATH:/opt/android-sdk/tools
export PATH=$PATH:/opt/android-ndk/
export PATH=$PATH:/opt/ant/bin
# Library paths
export PATH=$PATH:/usr/local/lib
# JRE and JDK paths
export PATH=$PATH:/opt/java/jre/bin
export PATH=$PATH:/opt/java/jdk/bin
# Go home
export GOPATH=~/.go
# Wine
export WINEARCH=win32
#
export PATH="$PATH:/home/johan/.gem/ruby/2.1.0/bin"

# Mina aliases
alias findproc="ps aux | grep"
alias dev_appserver="python /opt/google/appengine/dev_appserver.py"
alias appcfg="python /opt/google/appengine/appcfg.py"
alias steam-wine="wine ~/.wine/drive_c/Program\ Files/Steam/Steam.exe"

# ls aliases
alias e='vim'
alias ls='ls --color=auto'
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias alsaeq='alsamixer -D equal'


# Path to music
export pathtomusic=/home/johan/Music/
export mpd_music_dir=/home/johan/Music/

## Make speedup
NC=`cat /proc/cpuinfo | grep processor | wc -l`
alias make="make -j$NC"

## Application fixes

# Bspwm fix
export XDG_CONFIG_HOME="/home/johan/.config"
export BSPWM_SOCKET="/tmp/bspwm-socket"
path=('/home/johan/.config/bspwm/panel/' $path)
export path

# Plex home theater git fix
export XBMC_HOME=/usr/share/XBMC


#if [ "$(which powerline)" != "powerline not found" ]
#  then
#    . /home/johan/.zsh-powerline
#  else
    ## Fallback PS1
    autoload -U colors && colors
    PROMPT="%{$fg[green]%}%n%{$reset_color%}@%{$fg[blue]%}%m %{$fg_no_bold[yellow]%}%1~ %{$fg[red]%}$%{$reset_color%} "
    RPROMPT="[%{$fg_no_bold[yellow]%}%!%{$reset_color%}]"
#fi







# History
setopt histignorealldups sharehistory
# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
# Use modern completion system
autoload -Uz compinit
compinit




zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'




#zle -N zle-line-init
#zle -N zle-line-finish

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _npm_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###
