diff -up a/config.def.h b/config.def.h
--- a/config.def.h	2014-04-05 20:40:11.000000000 +0200
+++ b/config.def.h	2014-06-19 16:26:52.014125522 +0200
@@ -48,6 +48,8 @@ static char termname[] = "st-256color";
 
 static unsigned int tabspaces = 8;
 
+/* background opacity */
+static const int alpha = 0xdd;
 
 /* Terminal colors (16 first used in escape sequence) */
 static const char *colorname[] = {
@@ -75,6 +77,7 @@ static const char *colorname[] = {
 
 	/* more colors can be added after 255 to use with DefaultXX */
 	"#cccccc",
+    "black",
 };
 
 
@@ -83,7 +86,7 @@ static const char *colorname[] = {
  * foreground, background, cursor
  */
 static unsigned int defaultfg = 7;
-static unsigned int defaultbg = 0;
+static unsigned int defaultbg = 257;
 static unsigned int defaultcs = 256;
 
 /*
diff -up a/config.mk b/config.mk
--- a/config.mk	2014-04-05 20:40:11.000000000 +0200
+++ b/config.mk	2014-06-19 16:26:52.050792188 +0200
@@ -14,7 +14,7 @@ X11LIB = /usr/X11R6/lib
 INCS = -I. -I/usr/include -I${X11INC} \
        `pkg-config --cflags fontconfig` \
        `pkg-config --cflags freetype2`
-LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 -lutil -lXext -lXft \
+LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 -lutil -lXext -lXft -lXrender \
        `pkg-config --libs fontconfig`  \
        `pkg-config --libs freetype2`
 
diff -up a/st.c b/st.c
--- a/st.c	2014-04-05 20:40:11.000000000 +0200
+++ b/st.c	2014-06-19 16:48:38.297411618 +0200
@@ -65,6 +65,7 @@ char *argv0;
 #define XK_ANY_MOD    UINT_MAX
 #define XK_NO_MOD     0
 #define XK_SWITCH_MOD (1<<13)
+#define OPAQUE        0xff
 
 #define REDRAW_TIMEOUT (80*1000) /* 80 ms */
 
@@ -79,6 +80,7 @@ char *argv0;
 #define ATTRCMP(a, b) ((a).mode != (b).mode || (a).fg != (b).fg || (a).bg != (b).bg)
 #define IS_SET(flag) ((term.mode & (flag)) != 0)
 #define TIMEDIFF(t1, t2) ((t1.tv_sec-t2.tv_sec)*1000 + (t1.tv_usec-t2.tv_usec)/1000)
+#define USE_ARGB (alpha != OPAQUE && opt_embed == NULL)
 #define CEIL(x) (((x) != (int) (x)) ? (x) + 1 : (x))
 
 #define TRUECOLOR(r,g,b) (1 << 24 | (r) << 16 | (g) << 8 | (b))
@@ -255,6 +257,7 @@ typedef struct {
 	int w, h; /* window width and height */
 	int ch; /* char height */
 	int cw; /* char width  */
+    int depth; /* bit depth */
 	char state; /* focus, redraw, visible */
 } XWindow;
 
@@ -2706,8 +2709,7 @@ xresize(int col, int row) {
 	xw.th = MAX(1, row * xw.ch);
 
 	XFreePixmap(xw.dpy, xw.buf);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h,
-			DefaultDepth(xw.dpy, xw.scr));
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h,xw.depth);
 	XftDrawChange(xw.draw, xw.buf);
 	xclear(0, 0, xw.w, xw.h);
 }
@@ -2738,6 +2740,13 @@ xloadcols(void) {
 		}
 	}
 
+     /* set alpha value of bg color */
+     if (USE_ARGB) {
+             dc.col[defaultbg].color.alpha = (0xffff * alpha) / OPAQUE; //0$
+             dc.col[defaultbg].pixel &= 0x00111111;
+             dc.col[defaultbg].pixel |= alpha << 24; // 0xcc000000;
+     }
+
 	/* load colors [16-255] ; same colors as xterm */
 	for(i = 16, r = 0; r < 6; r++) {
 		for(g = 0; g < 6; g++) {
@@ -2992,7 +3001,38 @@ xinit(void) {
 	if(!(xw.dpy = XOpenDisplay(NULL)))
 		die("Can't open display\n");
 	xw.scr = XDefaultScreen(xw.dpy);
-	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+    xw.depth = (USE_ARGB)? 32: XDefaultDepth(xw.dpy, xw.scr);
+    if (! USE_ARGB)
+            xw.vis = XDefaultVisual(xw.dpy, xw.scr);
+    else {
+            XVisualInfo *vis;
+            XRenderPictFormat *fmt;
+            int nvi;
+            int i;
+
+            XVisualInfo tpl = {
+                    .screen = xw.scr,
+                    .depth = 32,
+                    .class = TrueColor
+            };
+
+            vis = XGetVisualInfo(xw.dpy, VisualScreenMask | VisualDepthMask | VisualClassMask, &tpl, &nvi);
+            xw.vis = NULL;
+            for(i = 0; i < nvi; i ++) {
+                    fmt = XRenderFindVisualFormat(xw.dpy, vis[i].visual);
+                    if (fmt->type == PictTypeDirect && fmt->direct.alphaMask) {
+                            xw.vis = vis[i].visual;
+                            break;
+                    }
+            }
+
+            XFree(vis);
+
+            if (! xw.vis) {
+                    fprintf(stderr, "Couldn't find ARGB visual.\n");
+                    exit(1);
+            }
+    }
 
 	/* font */
 	if(!FcInit())
@@ -3002,8 +3042,11 @@ xinit(void) {
 	xloadfonts(usedfont, 0);
 
 	/* colors */
-	xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
-	xloadcols();
+    if (! USE_ARGB)
+            xw.cmap = XDefaultColormap(xw.dpy, xw.scr);
+    else
+            xw.cmap = XCreateColormap(xw.dpy, XRootWindow(xw.dpy, xw.scr), xw.vis, None);
+    xloadcols();
 
 	/* adjust fixed window geometry */
 	if(xw.isfixed) {
@@ -3036,17 +3079,18 @@ xinit(void) {
 	parent = opt_embed ? strtol(opt_embed, NULL, 0) : \
 			XRootWindow(xw.dpy, xw.scr);
 	xw.win = XCreateWindow(xw.dpy, parent, xw.fx, xw.fy,
-			xw.w, xw.h, 0, XDefaultDepth(xw.dpy, xw.scr), InputOutput,
+			xw.w, xw.h, 0, xw.depth, InputOutput,
 			xw.vis, CWBackPixel | CWBorderPixel | CWBitGravity
 			| CWEventMask | CWColormap, &xw.attrs);
 
 	memset(&gcvalues, 0, sizeof(gcvalues));
 	gcvalues.graphics_exposures = False;
-	dc.gc = XCreateGC(xw.dpy, parent, GCGraphicsExposures,
-			&gcvalues);
-	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h,
-			DefaultDepth(xw.dpy, xw.scr));
-	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
+	xw.buf = XCreatePixmap(xw.dpy, xw.win, xw.w, xw.h, xw.depth);
+    dc.gc = XCreateGC(xw.dpy, 
+                      (USE_ARGB)? xw.buf: parent,
+                      GCGraphicsExposures,
+                      &gcvalues);
+   	XSetForeground(xw.dpy, dc.gc, dc.col[defaultbg].pixel);
 	XFillRectangle(xw.dpy, xw.buf, dc.gc, 0, 0, xw.w, xw.h);
 
 	/* Xft rendering context */
